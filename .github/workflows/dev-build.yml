name: Development Build

on:
  push:
    branches: [ main ]

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: 1

jobs:
  build:
    strategy:
      fail-fast: false
      matrix:
        include:
          - platform: 'macos-latest'
            args: '--target universal-apple-darwin'
            target: 'aarch64-apple-darwin,x86_64-apple-darwin'
          - platform: 'ubuntu-22.04'
            args: ''
            target: 'x86_64-unknown-linux-gnu'
          - platform: 'windows-latest'
            args: ''
            target: 'x86_64-pc-windows-msvc'

    runs-on: ${{ matrix.platform }}
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Generate development version
        id: version
        run: |
          # Generate version based on current version + commit hash
          COMMIT_HASH=$(git rev-parse --short HEAD)
          TIMESTAMP=$(date +%Y%m%d%H%M)
          BASE_VERSION="2.0.0-alpha"
          DEV_VERSION="${BASE_VERSION}.dev.${TIMESTAMP}.${COMMIT_HASH}"
          echo "version=${DEV_VERSION}" >> $GITHUB_OUTPUT
          echo "tag=dev-${TIMESTAMP}-${COMMIT_HASH}" >> $GITHUB_OUTPUT
          echo "Development version: ${DEV_VERSION}"

      - name: Install dependencies (Ubuntu only)
        if: matrix.platform == 'ubuntu-22.04'
        run: |
          sudo apt-get update
          sudo apt-get install -y libwebkit2gtk-4.1-dev libappindicator3-dev librsvg2-dev patchelf

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 10

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22'
          cache: 'pnpm'

      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}
          components: rustfmt, clippy

      - name: Install additional Rust targets for macOS universal build
        if: matrix.platform == 'macos-latest'
        run: |
          rustup target add aarch64-apple-darwin
          rustup target add x86_64-apple-darwin

      - name: Rust cache
        uses: swatinem/rust-cache@v2
        with:
          workspaces: './src-tauri -> target'

      - name: Install frontend dependencies
        run: pnpm install

      - name: Update version in configuration files
        shell: bash
        run: |
          # Update package.json version
          npm version ${{ steps.version.outputs.version }} --no-git-tag-version

          # Update Cargo.toml version (cross-platform compatible)
          if [[ "$RUNNER_OS" == "macOS" ]]; then
            sed -i '' 's/^version = ".*"/version = "${{ steps.version.outputs.version }}"/' src-tauri/Cargo.toml
          else
            sed -i 's/^version = ".*"/version = "${{ steps.version.outputs.version }}"/' src-tauri/Cargo.toml
          fi

          # Update tauri.conf.json version (cross-platform compatible)
          if [[ "$RUNNER_OS" == "macOS" ]]; then
            sed -i '' 's/"version": ".*"/"version": "${{ steps.version.outputs.version }}"/' src-tauri/tauri.conf.json
          else
            sed -i 's/"version": ".*"/"version": "${{ steps.version.outputs.version }}"/' src-tauri/tauri.conf.json
          fi

      - name: Build frontend
        run: pnpm build

      - name: Build Tauri app
        uses: tauri-apps/tauri-action@v0.5.22
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          args: ${{ matrix.args }}

      - name: Upload artifacts (macOS)
        if: matrix.platform == 'macos-latest'
        uses: actions/upload-artifact@v4
        with:
          name: macos-dev-${{ steps.version.outputs.tag }}
          path: |
            src-tauri/target/universal-apple-darwin/release/bundle/dmg/*.dmg
            src-tauri/target/universal-apple-darwin/release/bundle/macos/*.app

      - name: Upload artifacts (Linux)
        if: matrix.platform == 'ubuntu-22.04'
        uses: actions/upload-artifact@v4
        with:
          name: linux-dev-${{ steps.version.outputs.tag }}
          path: |
            src-tauri/target/release/bundle/deb/*.deb
            src-tauri/target/release/bundle/appimage/*.AppImage

      - name: Upload artifacts (Windows)
        if: matrix.platform == 'windows-latest'
        uses: actions/upload-artifact@v4
        with:
          name: windows-dev-${{ steps.version.outputs.tag }}
          path: |
            src-tauri/target/release/bundle/msi/*.msi
            src-tauri/target/release/bundle/nsis/*.exe

  create-dev-release:
    needs: build
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Generate development version
        id: version
        run: |
          COMMIT_HASH=$(git rev-parse --short HEAD)
          TIMESTAMP=$(date +%Y%m%d%H%M)
          BASE_VERSION="2.0.0-alpha"
          DEV_VERSION="${BASE_VERSION}.dev.${TIMESTAMP}.${COMMIT_HASH}"
          echo "version=${DEV_VERSION}" >> $GITHUB_OUTPUT
          echo "tag=dev-${TIMESTAMP}-${COMMIT_HASH}" >> $GITHUB_OUTPUT

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        
      - name: Display structure of downloaded files
        run: ls -la
        
      - name: Create development release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ steps.version.outputs.tag }}
          name: "Development Build ${{ steps.version.outputs.version }}"
          prerelease: true
          draft: false
          body: |
            ## 🚧 Development Build
            
            This is an automated development build from the latest commit on the main branch.
            
            **Version:** `${{ steps.version.outputs.version }}`
            **Commit:** `${{ github.sha }}`
            **Build Date:** `${{ github.event.head_commit.timestamp }}`
            
            ### ⚠️ Important Notes
            - This is a **development build** and may contain bugs or incomplete features
            - Not recommended for production use
            - Features may change without notice
            
            ### 📦 Downloads
            
            Choose the appropriate installer for your operating system:
            
            #### macOS
            - **DMG**: Universal binary for Intel and Apple Silicon Macs
            
            #### Windows  
            - **MSI**: Windows Installer package
            - **EXE**: NSIS installer
            
            #### Linux
            - **DEB**: Debian/Ubuntu package
            - **AppImage**: Portable application
            
            ### 🔄 Latest Changes
            ${{ github.event.head_commit.message }}
          files: |
            macos-dev-${{ steps.version.outputs.tag }}/**/*
            linux-dev-${{ steps.version.outputs.tag }}/**/*
            windows-dev-${{ steps.version.outputs.tag }}/**/*
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Clean up old development releases
        uses: actions/github-script@v7
        with:
          script: |
            const { data: releases } = await github.rest.repos.listReleases({
              owner: context.repo.owner,
              repo: context.repo.repo,
              per_page: 100
            });
            
            // Filter development releases (those with tag starting with 'dev-')
            const devReleases = releases.filter(release => 
              release.tag_name.startsWith('dev-') && release.prerelease
            );
            
            // Sort by creation date (newest first)
            devReleases.sort((a, b) => new Date(b.created_at) - new Date(a.created_at));
            
            // Keep only the latest 10 development releases, delete the rest
            const releasesToDelete = devReleases.slice(10);
            
            for (const release of releasesToDelete) {
              console.log(`Deleting old development release: ${release.tag_name}`);
              try {
                // Delete the release
                await github.rest.repos.deleteRelease({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  release_id: release.id
                });
                
                // Delete the tag
                await github.rest.git.deleteRef({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  ref: `tags/${release.tag_name}`
                });
              } catch (error) {
                console.log(`Failed to delete release ${release.tag_name}: ${error.message}`);
              }
            }
