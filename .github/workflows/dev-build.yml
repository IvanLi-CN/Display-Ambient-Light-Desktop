name: Development Build

on:
  push:
    branches: [ main ]

permissions:
  contents: write
  packages: write

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: 1

jobs:
  build:
    outputs:
      version: ${{ steps.version.outputs.version }}
      tag: ${{ steps.version.outputs.tag }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - platform: 'macos-latest'
            args: '--target universal-apple-darwin'
            target: 'aarch64-apple-darwin,x86_64-apple-darwin'

    runs-on: ${{ matrix.platform }}
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Generate development version
        id: version
        run: |
          # Generate version based on current version + commit hash
          COMMIT_HASH=$(git rev-parse --short HEAD)
          TIMESTAMP=$(date +%Y%m%d%H%M)
          BASE_VERSION="2.0.0-alpha"
          DEV_VERSION="${BASE_VERSION}.dev.${TIMESTAMP}.${COMMIT_HASH}"
          TAG_NAME="dev-${TIMESTAMP}-${COMMIT_HASH}"
          echo "version=${DEV_VERSION}" >> $GITHUB_OUTPUT
          echo "tag=${TAG_NAME}" >> $GITHUB_OUTPUT
          echo "timestamp=${TIMESTAMP}" >> $GITHUB_OUTPUT
          echo "commit_hash=${COMMIT_HASH}" >> $GITHUB_OUTPUT
          echo "Development version: ${DEV_VERSION}"
          echo "Tag name: ${TAG_NAME}"

      - name: Setup Bun
        uses: oven-sh/setup-bun@v2
        with:
          bun-version: latest

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22'

      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}
          components: rustfmt, clippy

      - name: Install additional Rust targets for macOS universal build
        shell: bash
        run: |
          rustup target add aarch64-apple-darwin
          rustup target add x86_64-apple-darwin

      - name: Rust cache
        uses: swatinem/rust-cache@v2
        with:
          workspaces: './src-tauri -> target'

      - name: Install frontend dependencies
        run: bun install

      - name: Update version in configuration files
        shell: bash
        run: |
          # Update package.json version
          npm version ${{ steps.version.outputs.version }} --no-git-tag-version

          # Update Cargo.toml version (macOS)
          sed -i '' 's/^version = ".*"/version = "${{ steps.version.outputs.version }}"/' src-tauri/Cargo.toml

          # Update tauri.conf.json version (macOS)
          sed -i '' 's/"version": ".*"/"version": "${{ steps.version.outputs.version }}"/' src-tauri/tauri.conf.json

      - name: Build frontend
        run: bun run build

      - name: Build Tauri app
        uses: tauri-apps/tauri-action@v0.5.22
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          args: ${{ matrix.args }}
          includeDebug: false
          includeRelease: true

      - name: List build output directory
        run: |
          echo "=== Checking build output directories ==="
          find src-tauri/target -name "*.dmg" -o -name "*.app" | head -20
          echo "=== Universal darwin target directory ==="
          ls -la src-tauri/target/universal-apple-darwin/release/bundle/ || echo "Directory not found"
          echo "=== All target directories ==="
          ls -la src-tauri/target/

      - name: Upload artifacts (macOS)
        uses: actions/upload-artifact@v4
        with:
          name: macos-dev-${{ steps.version.outputs.tag }}
          path: |
            src-tauri/target/universal-apple-darwin/release/bundle/dmg/*.dmg
            src-tauri/target/universal-apple-darwin/release/bundle/macos/*.app
          if-no-files-found: error

  create-dev-release:
    needs: build
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Generate development version
        id: version
        run: |
          COMMIT_HASH=$(git rev-parse --short HEAD)
          TIMESTAMP=$(date +%Y%m%d%H%M)
          BASE_VERSION="2.0.0-alpha"
          DEV_VERSION="${BASE_VERSION}.dev.${TIMESTAMP}.${COMMIT_HASH}"
          TAG_NAME="dev-${TIMESTAMP}-${COMMIT_HASH}"
          echo "version=${DEV_VERSION}" >> $GITHUB_OUTPUT
          echo "tag=${TAG_NAME}" >> $GITHUB_OUTPUT
          echo "timestamp=${TIMESTAMP}" >> $GITHUB_OUTPUT
          echo "commit_hash=${COMMIT_HASH}" >> $GITHUB_OUTPUT

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: ./artifacts

      - name: Display structure of downloaded files
        run: |
          echo "=== Artifacts directory structure ==="
          find ./artifacts -type f -name "*.dmg" -o -name "*.app" | head -20
          echo "=== All files in artifacts ==="
          ls -la ./artifacts/
        
      - name: Create development release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ steps.version.outputs.tag }}
          name: "Development Build ${{ steps.version.outputs.version }}"
          prerelease: true
          draft: false
          body: |
            ## 🚧 Development Build
            
            This is an automated development build from the latest commit on the main branch.
            
            **Version:** `${{ steps.version.outputs.version }}`
            **Commit:** `${{ github.sha }}`
            **Build Date:** `${{ github.event.head_commit.timestamp }}`
            
            ### ⚠️ Important Notes
            - This is a **development build** and may contain bugs or incomplete features
            - Not recommended for production use
            - Features may change without notice
            
            ### 📦 Downloads

            #### macOS
            - **DMG**: Universal binary for Intel and Apple Silicon Macs (macOS 13.0+)

            ### 🔄 Latest Changes
            ${{ github.event.head_commit.message }}
          files: |
            ./artifacts/**/*.dmg
            ./artifacts/**/*.app
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Clean up old development releases
        uses: actions/github-script@v7
        with:
          script: |
            const { data: releases } = await github.rest.repos.listReleases({
              owner: context.repo.owner,
              repo: context.repo.repo,
              per_page: 100
            });
            
            // Filter development releases (those with tag starting with 'dev-')
            const devReleases = releases.filter(release => 
              release.tag_name.startsWith('dev-') && release.prerelease
            );
            
            // Sort by creation date (newest first)
            devReleases.sort((a, b) => new Date(b.created_at) - new Date(a.created_at));
            
            // Keep only the latest 10 development releases, delete the rest
            const releasesToDelete = devReleases.slice(10);
            
            for (const release of releasesToDelete) {
              console.log(`Deleting old development release: ${release.tag_name}`);
              try {
                // Delete the release
                await github.rest.repos.deleteRelease({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  release_id: release.id
                });
                
                // Delete the tag
                await github.rest.git.deleteRef({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  ref: `tags/${release.tag_name}`
                });
              } catch (error) {
                console.log(`Failed to delete release ${release.tag_name}: ${error.message}`);
              }
            }
